version: 0.2

env:
  variables:
    TZ: "Asia/Seoul"

phases:
  install:
    runtime-versions:
      java: corretto11
    run-as: root
  pre_build:
    commands:
      - export JAVA_17_HOME="/usr/lib/jvm/java-17-amazon-corretto.x86_64"
      - export JDK_17_HOME="/usr/lib/jvm/java-17-amazon-corretto.x86_64"
      - export JRE_17_HOME="/usr/lib/jvm/java-17-amazon-corretto.x86_64"
      - export JAVA_HOME="$JAVA_17_HOME"
      - export JRE_HOME="$JRE_17_HOME"
      - export JDK_HOME="$JDK_17_HOME"
      - |-
        export GNUPGHOME="$(mktemp -d)" \
            && curl -fL -o corretto.key https://yum.corretto.aws/corretto.key \
            && gpg --batch --import corretto.key \
            && gpg --batch --export --armor '6DC3636DAE534049C8B94623A122542AB04F24E3' > corretto.key \
            && rpm --import corretto.key \
            && rm -r "$GNUPGHOME" corretto.key \
            && curl -fL -o /etc/yum.repos.d/corretto.repo https://yum.corretto.aws/corretto.repo \
            && grep -q '^gpgcheck=1' /etc/yum.repos.d/corretto.repo \
            && yum install -y java-17-amazon-corretto-devel \
            && (find /usr/lib/jvm/java-17-amazon-corretto.x86_64 -name src.zip -delete || true) \
            && yum install -y fontconfig
      - |-
        for tool_path in "$JAVA_HOME"/bin/*;
         do tool=`basename "$tool_path"`;
          if [ $tool != 'java-rmi.cgi' ];
          then
           rm -f /usr/bin/$tool /var/lib/alternatives/$tool \
            && update-alternatives --install /usr/bin/$tool $tool $tool_path 20000;
          fi;
        done
      - REGION=ap-northeast-2
      - REPOSITORY_URI=809995143298.dkr.ecr.ap-northeast-2.amazonaws.com/web-novel
      - IMAGE_NAME=web-novel
      - IMAGE_TAG=latest
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - BUILD_TAG=${COMMIT_HASH:=latest}
      - CONTAINER_NAME=web-novel
      - echo Logging in to Amazon ECR...
        - aws --version
        - aws ecr get-login-password | docker login --username AWS --password-stdin $REPOSITORY_URI
        - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
        - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Building the Docker image...
      - chmod +x gradlew
      - ./gradlew bootBuildImage --imageName=$IMAGE_NAME
      - docker build -t $REPOSITORY_URI:latest -t $REPOSITORY_URI:$IMAGE_TAG .
      - echo Docker build and tagging completed on `date`
  post_build:
    commands:
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI/$IMAGE_NAME:$IMAGE_TAG
      - docker push $REPOSITORY_URI/$IMAGE_NAME:$BUILD_TAG
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI/$IMAGE_NAME:$BUILD_TAG > imagedefinitions.json
      - cat imagedefinitions.json

cache:
  paths:
    - '/root/.gradle/caches/**/*'
    - '/root/.m2/**/*'
    - '/root/.cache/pip/**/*'
    - '/root/.npm/**/*'

artifacts:
  files:
    - imagedefinitions.json
